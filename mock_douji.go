// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package douji is a generated GoMock package.
package douji

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCardDealer is a mock of CardDealer interface.
type MockCardDealer struct {
	ctrl     *gomock.Controller
	recorder *MockCardDealerMockRecorder
}

// MockCardDealerMockRecorder is the mock recorder for MockCardDealer.
type MockCardDealerMockRecorder struct {
	mock *MockCardDealer
}

// NewMockCardDealer creates a new mock instance.
func NewMockCardDealer(ctrl *gomock.Controller) *MockCardDealer {
	mock := &MockCardDealer{ctrl: ctrl}
	mock.recorder = &MockCardDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardDealer) EXPECT() *MockCardDealerMockRecorder {
	return m.recorder
}

// DealOne mocks base method.
func (m *MockCardDealer) DealOne() Card {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealOne")
	ret0, _ := ret[0].(Card)
	return ret0
}

// DealOne indicates an expected call of DealOne.
func (mr *MockCardDealerMockRecorder) DealOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealOne", reflect.TypeOf((*MockCardDealer)(nil).DealOne))
}

// MockMiddleGame is a mock of MiddleGame interface.
type MockMiddleGame struct {
	ctrl     *gomock.Controller
	recorder *MockMiddleGameMockRecorder
}

// MockMiddleGameMockRecorder is the mock recorder for MockMiddleGame.
type MockMiddleGameMockRecorder struct {
	mock *MockMiddleGame
}

// NewMockMiddleGame creates a new mock instance.
func NewMockMiddleGame(ctrl *gomock.Controller) *MockMiddleGame {
	mock := &MockMiddleGame{ctrl: ctrl}
	mock.recorder = &MockMiddleGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleGame) EXPECT() *MockMiddleGameMockRecorder {
	return m.recorder
}

// CallOnce mocks base method.
func (m *MockMiddleGame) CallOnce(player *Player, step, end int, lastCall bool) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallOnce", player, step, end, lastCall)
	ret0, _ := ret[0].(int)
	return ret0
}

// CallOnce indicates an expected call of CallOnce.
func (mr *MockMiddleGameMockRecorder) CallOnce(player, step, end, lastCall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallOnce", reflect.TypeOf((*MockMiddleGame)(nil).CallOnce), player, step, end, lastCall)
}

// InOrOut mocks base method.
func (m *MockMiddleGame) InOrOut(player *Player, callingChip int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InOrOut", player, callingChip)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InOrOut indicates an expected call of InOrOut.
func (mr *MockMiddleGameMockRecorder) InOrOut(player, callingChip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InOrOut", reflect.TypeOf((*MockMiddleGame)(nil).InOrOut), player, callingChip)
}
